function path = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP=2*(ones(MAX_X,MAX_Y));
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    k=1;%Dummy counter
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);
    %set the starting node as the first node
    xNode=xval;
    yNode=yval;
    OPEN_COUNT=1;
    goal_distance=distance(xNode,yNode,xTarget,yTarget);
    path_cost=0;
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance);
%     OPEN(OPEN_COUNT,1)=0; %屏蔽此行代码，避免使用min_fn时一开始就返回-1
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    NoPath=1;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
    Expanded = [];%Expanded用来存储已经访问过的OPEN数据集
    Expanded_Count = 1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    while(size(OPEN,1)) %you have to dicide the Conditions for while loop exit. If the queue is empty,end;
     %
     %finish the while loop
     %
     % Remove the node “n” with the lowest f(n)=g(n)+h(n) from the priority queue
     % Find the node“n” with the lowest f(n)=g(n)+h(n) from the priority queue,使用min_fn函数，返回的是Open set里面的第几个节点
     i_min = min_fn(OPEN,OPEN_COUNT,xTarget,yTarget); 
     % 从Open Set里面删除这个节点,删除之前先将坐标、g(n)以及父节点记下,并且存储到已经Expanded这个数组里面
     if i_min ==-1
         break
     end
     xNode = OPEN(i_min,2);
     yNode = OPEN(i_min,3);
     gn = OPEN(i_min,7);
     Expanded(Expanded_Count,:)=OPEN(i_min,:);
     Expanded_Count = Expanded_Count+1;
     OPEN(i_min,:)=[];
     OPEN_COUNT = OPEN_COUNT-1;
     % 标记未待扩展的节点，并且放入Closed set
     CLOSED_COUNT=CLOSED_COUNT+1;
     CLOSED(CLOSED_COUNT,1)=xNode;
     CLOSED(CLOSED_COUNT,2)=yNode;
     exp_array=expand_array(xNode,yNode,gn,xTarget,yTarget,CLOSED,MAX_X,MAX_Y); %扩展的函数已经检测了扩展的节点不在Closed节点中，即未扩展过
     %更新未扩展节点的gn值，openset里面只有起始点，也没有给其他顶点赋初始inf,在扩展的时候已经计算gn值，不需要考虑无穷的情况
     if OPEN_COUNT>=1
         for i=1:OPEN_COUNT
             cnm = distance(OPEN(i,2),OPEN(i,3),xNode,yNode);
             if OPEN(i,7)>gn+cnm
                OPEN(i,7)=gn+cnm;
             end
         end
     end
     % 将邻居节点添加到OPEN set里面
     for i=1:size(exp_array,1)
         OPEN_COUNT =OPEN_COUNT+1;
         OPEN(OPEN_COUNT,:)=insert_open(exp_array(i,1),exp_array(i,2),xNode,yNode,exp_array(i,3),exp_array(i,4),exp_array(i,5));
     %If the node “n” is the goal state, return TRUE; break
     
      if (exp_array(i,1)==xTarget)&&(exp_array(i,2)==yTarget)
          xNode = exp_array(i,1);
          yNode = exp_array(i,2);
          Expanded(Expanded_Count,:)=OPEN(OPEN_COUNT,:);
             break
      end 
     end
    if (xNode==xTarget)&&(yNode==yTarget)
        break
    end
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
   path = [];
   path_count = 1;
   while 1
   path(path_count,1)=xNode;
   path(path_count,2)=yNode;
   path_count = path_count+1;
   n_index = node_index(Expanded,xNode,yNode); %在Expanded中找到终点目标所在的index
   xNode = Expanded(n_index,4); %寻找父节点X位置
   yNode = Expanded(n_index,5); %寻找父节点Y位置
   if (xNode ==xStart && yNode ==yStart) %回溯到初始位置，停止break
       path(path_count,1)=xNode;
       path(path_count,2)=yNode;
       break
   end
   end
   
end
